设计模式从大的方面分为三类
分别 创造型、结构型、表现型
创造型进行了对象的创建或者说初始化
结构型来定义了对象与对象之间的关系
表现型定义了对象的行为

一个对象从初始化到对象之间的关系 再到定义对象的行为的一系列过程


单一职责原则（SRP）：就一个类而言，应该仅有一个引起他变化的原因
                  如果一个类承担的职责太多，就等于把这些职责耦合在一起 一个职责的变化可能和削弱或者抑制其他职责
                  这种耦合会导致脆弱的设计
                  如果能想到多余一个的动机来改变这个类  那么这个类就具有多于一个的职责

开放封闭原则：软件实体（类或者函数模块应该对修改关闭  对扩展开放）  对程序中呈现出频繁变化的部分做抽象
            面对需求，程序的改动是通过新增代码来实现 而不是修改原来的代码来实现

依赖倒置原则：针对接口编程，不针对实现编程
            1、高层模块不应该依赖于底层模块  两个都应该依赖抽象
            2、抽象不依赖细节、细节应该依赖于抽象

里氏替换原则：子类型必须能够替换它的父类型，就是说父类型能出现的地方  子类型一定也能出现

迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不必发生直接的相互作用，如果其中的一个类要调用另一个类的方法，直接通过第三者去转发
           其主要思想  强调了类之间的松耦合

